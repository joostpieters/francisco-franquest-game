;;; Copyright (c) 2013 by Rodrigo Oliva and Daniel Castillo. And Franco.
;;; Test for Cairo with OpenGL

(define-type world gamestate keystate spaceship lazorzs enemies boss)
(define-type spaceship x y width height fire lives)
(define-type enemy x y width height)
(define-type boss x y width height lives direction)
(define (make-world/init) (make-world 'init-screen 'none (make-spaceship 15. 376. 100. 50. 'none 3) '() '() 'none))
(define-type lazorz x y width height)
(define enemies-timer 25)
(define blinking-timer 0)
(define previous-time 0)
(define time-buffer 0)
(define fact-timer 0)
(define score 0)
(define level 1)

(define (rember-all l en world)
  (let recur ((nlist l))
    (cond 
     ((null? nlist)
      '())
     ((and (>= (+ (lazorz-x (car nlist)) 50.) (enemy-x en)) 
           (<= (+ (lazorz-x (car nlist)) 50.) (+ (enemy-x en) 50.))
           (>= (lazorz-y (car nlist)) (-(enemy-y en) 10))
           (<= (lazorz-y (car nlist)) (+ (enemy-y en) 35)))
      (recur (cdr nlist)))
     (else 
      (cons (car nlist)
            (recur (cdr nlist)))))))

(define (rember-all-boss l boss world)
  (let recur ((nlist l))
    (cond 
     ((null? nlist)
      '())
     ((and (>= (+ (lazorz-x (car nlist)) 50.) (boss-x boss)) 
           (<= (+ (lazorz-x (car nlist)) 50.) (+ (boss-x boss) (boss-width boss)))
           (>= (lazorz-y (car nlist)) (-(boss-y boss) 10))
           (<= (lazorz-y (car nlist)) (+ (boss-y boss) (+ (boss-height boss) 10) )))
      (recur (cdr nlist)))
     (else 
      (cons (car nlist)
            (recur (cdr nlist)))))))

;; Actualiza los lazorz para que se muevan.
(define (lazorz-updater l world)
  (let recur ((nlist l))
    (cond
     ((null? nlist) '())
     ((>= (lazorz-x (car nlist)) 1280 )
      (recur (cdr nlist)))
     (else
      (cons (make-lazorz (+ (lazorz-x (car nlist)) 30.) (lazorz-y (car nlist)) (lazorz-width (car nlist)) (lazorz-height (car nlist)))
            (recur (cdr nlist)))))))

(define (lazorz-enemy-collision l en world)
  (let recur ((nlist l))
    (cond
     ((null? nlist) #f)
     ((and (>= (+ (lazorz-x (car nlist)) 50.) (enemy-x en)) (<= (+ (lazorz-x (car nlist)) 50.) (+ (enemy-x en) 50)) (>= (lazorz-y (car nlist)) (- (enemy-y en) 10)) (<= (lazorz-y (car nlist)) (+ (enemy-y en) 35)))
      #t)
     (else 
      (recur (cdr nlist))))))

(define (lazorz-boss-collision l boss world)
  (let recur ((nlist l))
    (cond
     ((null? nlist) #f)
     ((and (>= (+ (lazorz-x (car nlist)) 50.) (boss-x boss))
           (<= (+ (lazorz-x (car nlist)) 50.) (+ (boss-x boss) (boss-width boss)))
           (>= (lazorz-y (car nlist)) (- (boss-y boss) 10))
           (<= (lazorz-y (car nlist)) (+ (boss-y boss) (+ (boss-height boss) 10))))
      #t)
     (else 
      (recur (cdr nlist))))))

(define (spaceship-enemy-collision l en world)
  (let recur ((nlist l))
    (cond
     ((null? nlist) #f)
     ((and (>= (+ (enemy-x (car nlist)) 50.) (spaceship-x en)) (<= (+ (enemy-x (car nlist)) 50.) (+ (spaceship-x en) 100)) (>= (enemy-y (car nlist)) (- (spaceship-y en) 25)) (<= (enemy-y (car nlist)) (+ (spaceship-y en) 50)))
      #t)
     (else 
      (recur (cdr nlist))))))

(define (enemies-updater l world)
  (let recur ((nlist l))
    (cond
     ((null? nlist) '())
     ((or (lazorz-enemy-collision (world-lazorzs world) (car nlist) world) (<= (enemy-x (car nlist)) 0 ))
      (world-lazorzs-set! world (rember-all (world-lazorzs world) (car nlist) world)) 
      (recur (cdr nlist)))
     (else
      (cons (make-enemy (- (enemy-x (car nlist)) 10.) (enemy-y (car nlist)) (enemy-width (car nlist)) (enemy-height (car nlist)))
            (recur (cdr nlist)))))))

(define (boss-updater boss world)
  (cond
   ((or (eq? boss 'none) (<= (boss-lives boss) 0))
    (set! score (+ score 13371337))
    'none)
   ((lazorz-boss-collision (world-lazorzs world) boss world)
    (world-lazorzs-set! world (rember-all-boss (world-lazorzs world) boss world))
    (if (> (boss-x boss) 750)
        (make-boss (- (boss-x boss) 1) (boss-y boss) (boss-width boss) (boss-height boss) (- (boss-lives boss) 1) (boss-direction boss))
        (case (boss-direction boss)
          ((up)
           (when (<= (boss-y boss) 50)
                 (boss-direction-set! (world-boss world) 'down))
           (make-boss (boss-x boss) (- (boss-y boss) 1) (boss-width boss) (boss-height boss) (-(boss-lives boss) 1) (boss-direction boss)))
          ((down)
           (when (>= (boss-y boss) (- 720 (boss-width boss)))
                 (boss-direction-set! (world-boss world) 'up))
           (make-boss (boss-x boss) (+ (boss-y boss) 1) (boss-width boss) (boss-height boss) (-(boss-lives boss) 1) (boss-direction boss))))))
   (else
    (if (> (boss-x boss) 750)
        (make-boss (- (boss-x boss) 1) (boss-y boss) (boss-width boss) (boss-height boss) (boss-lives boss) (boss-direction boss))
        (case (boss-direction boss)
          ((up)
           (when (<= (boss-y boss) 50)
                 (boss-direction-set! (world-boss world) 'down))
           (make-boss (boss-x boss) (- (boss-y boss) 1) (boss-width boss) (boss-height boss) (boss-lives boss) (boss-direction boss)))
          ((down)
           (when (>= (boss-y boss) (- 700 (boss-width boss)))
                 (boss-direction-set! (world-boss world) 'up))
           (make-boss (boss-x boss) (+ (boss-y boss) 1) (boss-width boss) (boss-height boss) (boss-lives boss) (boss-direction boss))))))))

(define (add-enemy l world)
  (let recur ((nlist l))
    (if (null? nlist)
        (cons (make-enemy 1280. (+ (random-integer 675) 25.) 40.  25.) '())
        (cons (car nlist) 
              (recur (cdr nlist))))))

(define (print-enemies l world cr)
  (let recur ((nlist l))
    (when (not(null? nlist))
          (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
          (cairo_rectangle cr (enemy-x (car nlist)) (enemy-y (car nlist)) (enemy-width (car nlist)) (enemy-height (car nlist)))
          (cairo_fill cr)
          (recur (cdr nlist)))))

(define (print-boss boss world cr)
  (unless (eq? boss 'none) 
          (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
          (cairo_rectangle cr (boss-x boss) (boss-y boss) (boss-width boss) (boss-height boss))
          (cairo_fill cr)
          (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
          (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
          (cairo_set_font_size cr 30.0)
          (cairo_move_to cr 930.0 730.0)
          (cairo_show_text cr (string-append "BOSSHEALTH: " (object->string (boss-lives boss))))
          (cairo_fill cr)))

;; AÃ±ade lazorz a la lista
(define (add-lazorz l world)
  (let recur ((nlist l))
    (if (null? nlist)
        (cons (make-lazorz (+ (spaceship-x (world-spaceship world)) 100.) (+ (spaceship-y (world-spaceship world)) 23.) 50. 4.) '())
        (cons (car nlist) 
              (recur (cdr nlist))))))

;; Imprime los lazorz
(define (print-lazorz l world cr)
  (let recur ((nlist l))
    (when (not(null? nlist))
          (cairo_set_source_rgba cr 1.0 0.0 0.0 1.0)
          (cairo_rectangle cr (lazorz-x (car nlist))(lazorz-y (car nlist)) (lazorz-width (car nlist)) (lazorz-height (car nlist)))
          (cairo_fill cr)
          (recur (cdr nlist)))))

(define (main)
  ((fusion:create-simple-gl-cairo '(width: 1280 height: 752))
   (lambda (event world)
    ;; (println (string-append "event: " (object->string event) " ; world: " (object->string world)))
     (let ((type (SDL_Event-type event))
           (make-world/keystate (lambda (keystate) (make-world (world-gamestate world) keystate (world-spaceship world)(world-lazorzs world) (world-enemies world) (world-boss world))))
           (make-world/gamestate (lambda (gamestate) (make-world gamestate 'none (make-spaceship 15. 376. 100. 50. 'none 3) '() '() 'none))))
       (cond
        ((= type SDL_QUIT)
         'exit)
        ((= type SDL_MOUSEBUTTONDOWN)
         (SDL_LogVerbose SDL_LOG_CATEGORY_APPLICATION "Button down")
         world)
        ((= type SDL_KEYDOWN)
         (SDL_LogVerbose SDL_LOG_CATEGORY_APPLICATION "Key down")
         (let* ((kevt (SDL_Event-key event))
                (key (SDL_Keysym-sym
                      (SDL_KeyboardEvent-keysym kevt))))
           (cond ((= key SDLK_ESCAPE)
                  'exit)
                 ((and (= key SDLK_SPACE) (eq? (world-gamestate world) 'init-screen))
                  (make-world/gamestate 'game-screen))
                 ((and (= key SDLK_SPACE) (eq? (world-gamestate world) 'death-screen))
                  (set! score 0)
                  (set! level 1)
                  (make-world/gamestate 'game-screen))
                 ((and (= key SDLK_SPACE) (eq? (world-gamestate world) 'game-screen))
                  (spaceship-fire-set! (world-spaceship world) 'fire)
                  world)
                 ((and (= key SDLK_UP) (eq? (world-gamestate world) 'game-screen))
                  (make-world/keystate 'up))
                 ((and (= key SDLK_DOWN) (eq? (world-gamestate world) 'game-screen))
                  (make-world/keystate 'down) )
                 ((and (= key SDLK_LEFT) (eq? (world-gamestate world) 'game-screen))
                  (make-world/keystate 'left))
                 ((and (= key SDLK_RIGHT) (eq? (world-gamestate world) 'game-screen))
                  (make-world/keystate 'right))
                 (else
                  (SDL_LogVerbose SDL_LOG_CATEGORY_APPLICATION (string-append "Key: " (number->string key)))
                  world))))
        ((= type SDL_KEYUP)
         (SDL_LogVerbose SDL_LOG_CATEGORY_APPLICATION "Key up")
         (let* ((kevt (SDL_Event-key event))
                (key (SDL_Keysym-sym
                      (SDL_KeyboardEvent-keysym kevt))))
           (cond 
            ((and (= key SDLK_UP) (eq? (world-keystate world) 'up))
             (make-world/keystate 'none) )
            ((and (= key SDLK_DOWN) (eq? (world-keystate world) 'down))
             (make-world/keystate 'none))
            ((and (= key SDLK_LEFT) (eq? (world-keystate world) 'left))
             (make-world/keystate 'none))
            ((and (= key SDLK_RIGHT) (eq? (world-keystate world) 'right))
             (make-world/keystate 'none))
            (else
             world))))
        ((= type SDL_WINDOWEVENT)
         (let* ((wevt (SDL_Event-window event))
                (event (SDL_WindowEvent-event wevt)))
           (cond
            ((= event SDL_WINDOWEVENT_SIZE_CHANGED)
             (SDL_LogVerbose SDL_LOG_CATEGORY_APPLICATION "Window Size Changed"))
            ((= event SDL_WINDOWEVENT_RESIZED)
             (SDL_LogVerbose SDL_LOG_CATEGORY_APPLICATION "Window Resized"))
            ((= event SDL_WINDOWEVENT_MINIMIZED)
             (SDL_LogVerbose SDL_LOG_CATEGORY_APPLICATION "Window Minimized"))
            ((= event SDL_WINDOWEVENT_RESTORED)
             (SDL_LogVerbose SDL_LOG_CATEGORY_APPLICATION "Window Restored"))))
         world)
        ((= type SDL_FINGERDOWN)
         (SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION "FINGER DOWN!")
         world)
        (else
         world))))
   (let ((posx 80.0))
     (lambda (cr time world)
      (println (string-append "time: " (object->string time) " ; world: " (object->string enemies-timer)))
       (case (world-gamestate world)
         ((init-screen)
          ;;(println asdf)
          ;;(SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION (object->string (SDL_GL_Extension_Supported "GL_EXT_texture_format_BGRA8888")))
          (cairo_set_source_rgba cr 0.0 0.0 0.0 0.02)
          (cairo_rectangle cr 0.0 0.0 1280.0 752.0)
          (cairo_fill cr)
          (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
          (cairo_set_source_rgba cr 1.0 1.0 1.0 0.8)
          (cairo_set_font_size cr 80.0)
          (cairo_move_to cr 350.0 380.0)
          (cairo_show_text cr "FRANcISC0")
          (cairo_fill cr))
         
         ((game-screen)
          (set! enemies-timer (- enemies-timer 1 ))
          (cond 
           ((> score 100000)
            (set! score (+ score 1))
            (set! level 'ASIAN)
            (when (<= enemies-timer 0)                 
                  (world-enemies-set! world (add-enemy (world-enemies world) world))
                  (set! enemies-timer 1 )))
           ((> score 13000)
            (set! level 'BOSS)
            (when (eq? (world-boss world) 'none)
             (world-boss-set! world (make-boss 1280. 160. 400. 400. 2000 'up))))     
           ((> score 12000)
            (set! level 9)
            (set! score (+ score 1))
            (when (= enemies-timer 0)                 
                  (world-enemies-set! world (add-enemy (world-enemies world) world))
                  (set! enemies-timer 10 )))
           ((> score 11000)
            (set! level 8)
            (set! score (+ score 1))
            (when (= enemies-timer 0)                 
                  (world-enemies-set! world (add-enemy (world-enemies world) world))
                  (set! enemies-timer 15 )))
           ((> score 10000)
            (set! level 7)
            (set! score (+ score 1))
            (when (= enemies-timer 0)       
                  (world-enemies-set! world (add-enemy (world-enemies world) world))
                  (set! enemies-timer 20 )))     
           ((> score 9000)
            (set! level 6)
            (set! score (+ score 1))
            (when (= enemies-timer 0)    
                  (world-enemies-set! world (add-enemy (world-enemies world) world))
                  (set! enemies-timer 25 )))
           ((> score 8000)
            (set! level 5)
            (set! score (+ score 1))
            (when (= enemies-timer 0)      
                  (world-enemies-set! world (add-enemy (world-enemies world) world))
                  (set! enemies-timer 30 )))
           ((> score 6000)
            (set! level 4)
            (set! score (+ score 1))
            (when (= enemies-timer 0) 
                  (world-enemies-set! world (add-enemy (world-enemies world) world))
                  (set! enemies-timer 35 )))
           ((> score 4000)
            (set! level 3)
            (set! score (+ score 1))
            (when (= enemies-timer 0)
                  (world-enemies-set! world (add-enemy (world-enemies world) world))
                  (set! enemies-timer 40 )))
           ((> score 2000)
            (set! level 2)
            (set! score (+ score 1))
            (when (= enemies-timer 0)
                  (world-enemies-set! world (add-enemy (world-enemies world) world))
                  (set! enemies-timer 50 )))
           (else
            (set! score (+ score 1))
            (when (= enemies-timer 0)
                  (world-enemies-set! world (add-enemy (world-enemies world) world))
                  (set! enemies-timer 70 ))))

          (when (eq? (spaceship-fire (world-spaceship world)) 'fire)
              (world-lazorzs-set! world (add-lazorz (world-lazorzs world) world))
              (spaceship-fire-set! (world-spaceship world) 'none))
          
          ;; (when 
          ;;  (and (eq? (world-keystate world) 'up) (> (spaceship-y (world-spaceship world)) 0) )
          ;;  (spaceship-y-set! (world-spaceship world) (- (spaceship-y (world-spaceship world)) 10.)))
          ;; (when
          ;;  (and (eq? (world-keystate world) 'down) (< (spaceship-y (world-spaceship world)) 700)) 
          ;;  (spaceship-y-set! (world-spaceship world) (+ (spaceship-y (world-spaceship world)) 10.)))
          ;; (when 
          ;;  (and (eq? (world-keystate world) 'left) (> (spaceship-x (world-spaceship world)) 0) )
          ;;  (spaceship-x-set! (world-spaceship world) (- (spaceship-x (world-spaceship world)) 10.)))
          ;; (when
          ;;  (and (eq? (world-keystate world) 'right) (< (spaceship-x (world-spaceship world)) 1180)) 
          ;;  (spaceship-x-set! (world-spaceship world) (+ (spaceship-x (world-spaceship world)) 10.)))


          (case (world-keystate world)
            ((up)
             (if (> (spaceship-y (world-spaceship world)) 0) 
                 (spaceship-y-set! (world-spaceship world) (- (spaceship-y (world-spaceship world)) 10.))))
            ((down)
             (if (< (spaceship-y (world-spaceship world)) 700) 
                 (spaceship-y-set! (world-spaceship world) (+ (spaceship-y (world-spaceship world)) 10.))))
            ((left)
             (if (> (spaceship-x (world-spaceship world)) 0) 
                 (spaceship-x-set! (world-spaceship world) (- (spaceship-x (world-spaceship world)) 10.))))
            ((right)
             (if (< (spaceship-x (world-spaceship world)) 1180) 
                 (spaceship-x-set! (world-spaceship world) (+ (spaceship-x (world-spaceship world)) 10.)))))
          
          (cairo_set_source_rgba cr 0.0 0.0 0.0 1.0)
          (cairo_rectangle cr 0.0 0.0 1280.0 752.0)
          (cairo_fill cr)
          (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
          (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
          (cairo_set_font_size cr 30.0)
          (cairo_move_to cr 1100.0 30.0)
          (cairo_show_text cr (string-append "LIVES: " (object->string (spaceship-lives (world-spaceship world)))))
          (cairo_fill cr)
          (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
          (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
          (cairo_set_font_size cr 30.0)
          (cairo_move_to cr 35.0 30.0)
          (cairo_show_text cr (string-append "SCORE: " (object->string score )))
          (cairo_fill cr)
          (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
          (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
          (cairo_set_font_size cr 30.0)
          (cairo_move_to cr 570.0 30.0)
          (cairo_show_text cr (string-append "LEVEL: " (object->string level )))
          (cairo_fill cr)
          
          (cond 
           ((odd? blinking-timer)
            (cairo_set_source_rgba cr 1.0 1.0 1.0 1.0)
            (cairo_rectangle cr (spaceship-x (world-spaceship world))  (spaceship-y (world-spaceship world)) (spaceship-width (world-spaceship world)) (spaceship-height (world-spaceship world)))
            (cairo_fill cr)
            (if ( >= blinking-timer 0) (set! blinking-timer (- blinking-timer 1))))
           (else
            (if ( >= blinking-timer 0) (set! blinking-timer (- blinking-timer 1)))))
          
          (when (not(null? (world-enemies world)))
                (print-enemies (world-enemies world) world cr)
                (world-enemies-set! world (enemies-updater (world-enemies world) world)))

          (unless (eq? (world-boss world) 'none)
                  (print-boss (world-boss world) world cr)
                  
                  (world-boss-set! world (boss-updater (world-boss world) world)))

          (when (not(null? (world-lazorzs world)))
                (print-lazorz (world-lazorzs world) world cr)
                (world-lazorzs-set! world (lazorz-updater (world-lazorzs world) world)))

          (when (and (> (spaceship-lives (world-spaceship world)) 0) (spaceship-enemy-collision (world-enemies world) (world-spaceship world) world) (<= blinking-timer 0)) 
                (spaceship-lives-set! (world-spaceship world) (- (spaceship-lives (world-spaceship world)) 1))
                (set! blinking-timer 100)) 
          
          (when (and (= (spaceship-lives (world-spaceship world)) 0) (spaceship-enemy-collision (world-enemies world) (world-spaceship world) world) (<= blinking-timer 0)) 
                (world-gamestate-set! world 'death-screen)))
         
         ((death-screen)
          ;;(println asdf)
          ;;(SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION (object->string (SDL_GL_Extension_Supported "GL_EXT_texture_format_BGRA8888")))
          (cairo_set_source_rgba cr 0.0 0.0 0.0 0.02)
          (cairo_rectangle cr 0.0 0.0 1280.0 752.0)
          (cairo_fill cr)
          (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
          (cairo_set_source_rgba cr 1.0 1.0 1.0 0.03)
          (cairo_set_font_size cr 80.0)
          (cairo_move_to cr 380.0 300.0)
          (cairo_show_text cr "FRANcISCO?")
          (cairo_fill cr)
          (cairo_set_source_rgba cr 1.0 1.0 1.0 0.03)
          (cairo_set_font_size cr 80.0)
          (cairo_move_to cr 180.0 500.0)
          (cairo_show_text cr "FRANcISCOOOOOOOO!")
          (cairo_fill cr)))
       world))
   (make-world/init)))

